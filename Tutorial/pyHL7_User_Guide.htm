<!DOCTYPE html>
<head>
<title>pyHL7</title>
<style type="text/css" media="screen">
	.editor { 
        position:inline-block;
        height:300px;
		width:760px;
		border-style:solid;
		border-width:2px;
    }
	#editor_large { 
        position:inline-block;
        height:700px;
		width:760px;
		border-style:solid;
		border-width:2px;
    }
</style>
<script>
// Setting editor theme and general settings
function reloadEditor(){
	var editors = document.getElementsByClassName("editor");
	//var theme = document.getElementById('theme').value;
	theme = 'xcode';
	//localStorage.setItem('theme',theme);
	for (var i=0;i<editors.length;i++) {
		var id = document.getElementsByClassName("editor")[i];
		var editor = ace.edit(id);
		editor.setTheme("ace/theme/"+theme);
		editor.getSession().setMode("ace/mode/python"); // Python syntax
		editor.setShowPrintMargin(false);
		editor.setReadOnly(true);
	}
	var options = document.getElementsByTagName('option');
	for (var i = 0;i < options.length; i++) {
		if (options[i].value == theme) {
			options[i].setAttribute("selected","selected");
		}
	}
}
</script>
</head>

<body>
<h3>pyHL7 User Guide</h3>
<!--
Editor Theme: <select id='theme' onclick='reloadEditor();'>
	<option value='ambiance'>Ambiance</option>
	<option value='chaos'>Chaos</option>
	<option value='chrome'>Chrome</option>
	<option value='clouds'>Clouds</option>
	<option value='clouds_midnight'>Clouds-Midnight</option>
	<option value='cobalt'>Cobalt</option>
	<option value='crimson_editor'>Crimson-Editor</option>
	<option value='dawn'>Dawn</option>
	<option value='dreamweaver'>Dreamweaver</option>
	<option value='eclipse'>Eclipse</option>
	<option value='github'>Github</option>
	<option value='idle_fingers'>Idle Fingers</option>
	<option value='katzenmillch'>Katzenmilch</option>
	<option value='kuroir'>Kuroir</option>
	<option value='merbivore'>Merbivore</option>
	<option value='merbivore_soft'>Merbivore-soft</option>
	<option value='mono_industrial'>Mono-Industrial</option>
	<option value='monokai'>Monokai</option>
	<option value='pastel_on_dark'>Pastel-On-Dark</option>
	<option value='solarized_dark'>Solarized-Dark</option>
	<option value='solarized_light'>Solarized-Light</option>
	<option value='terminal'>Terminal</option>
	<option value='textmate'>Textmate</option>
	<option value='tomorrow'>Tomorrow</option>
	<option value='tomorrow_night'>Tomorrow Night</option>
	<option value='tomorrow_night_blue'>Tomorrow Night Blue</option>
	<option value='tomorrow_night_bright'>Tomorrow Night Bright</option>
	<option value='tomorrow_night_eighties'>Tomorrow Night 80's</option>
	<option value='twilight'>Twilight</option>
	<option value='vibrant_ink'>Vibrant Ink</option>
	<option value='xcode'>X-code</option>
	</select>
-->
<br><br>
Contents:<br>
<ul>
<li><a href="#mapper">HL7 Mapper</a></li>
<li><a href="#tcp_in">Inbound TCP</a></li>
<li><a href="#tcp_out">Outbound TCP</a></li>
<li><a href="#file_in">Inbound File</a></li>
<li><a href="#file_out">Outbound File</a></li>
<li><a href="#file_misc">Misc. File Functions</a></li>
<li><a href="#examples">Examples</a></li>
</ul><br><br>

<!------------------ Mapper section ------------------>
<a name="mapper"></a>
<h3>HL7 Mapper</h3>
Parsing HL7 message from String to dictionary and back
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Converting HL7 message string to dictionary
msg = hl7.parse(msgString)

# Converting back to string
msgString = hl7.toString(msg)</div>
<br>
Retrieving data
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Converting HL7 message string to dictionary
msg = hl7.parse(msgString)

# Accessing sending system field
print(msg['MSH'][0]['MSH.3'][0]['MSH.3.1'])

# Retrieving data from a repeating segment
if hl7.rep(msg['OBX']):
	for obx in msg['OBX']:
		print(obx['OBX.5'][0]['OBX.5.1'])

# Converting back to string
msgString = hl7.toString(msg)</div>
<br>
Updating values
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Converting HL7 message string to dictionary
msg = hl7.parse(msgString)

# Updating sending system field
msg['MSH'][0]['MSH.3'][0]'MSH.3.1'] = 'pyHL7'

# Updating data from a repeating segment. Doing in a different manner
if hl7.rep(msg['OBX']):
	i = 0
	while i < len(msg['OBX']):
		msg['OBX'][i]['OBX.5'][0]['OBX.5.1'] = 'OBX Value'
		i += 1

# Converting back to string
msgString = hl7.toString(msg)</div>
<br>
Shortcuts for common HL7 fields
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Converting HL7 message string to dictionary
msg = hl7.parse(msgString)

# Returning short-cuts to useful fields
msg['msg_date'] 	# Message Date (MSH.7)
msg['msg_type'] 	# Message Type (MSH.9.1)
msg['msg_event'] 	# Message Trigger Event (MSH.9.2)
msg['msg_id'] 		# Message ID (MSH.10)
msg['msg_version'] 	# HL7 Version (MSH.12)

# Other metadata fields
msg['build'] 		# The messages structure, used when converting to string
msg['segments']		# Listing of segments in the message
msg['raw']			# The unparsed message

# Converting back to string
msgString = hl7.toString(msg)</div>

<!------------------ TCP inbound section ------------------>
<a name="tcp_in"></a>
<h3>TCP Listener</h3>
Creating simple inbound listener
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)

ib.start()	# Starting listener

print(ib.remoteAddress())	# Printing the remote IP and Port

ib.stop() 	# Stopping listener</div>
<br>
To accept the message from the inbound connection you'll need to 
call "getMsg()" which will return message to variable
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)

ib.start()	# Starting listener

msg = ib.getMsg()

ib.stop() 	# Stopping listener</div>
<br>
This will accept one message and acknowledge it.  To keep the inbound connection open, place in loop
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)

ib.start()	# Starting listener

while True:
	msg = ib.getMsg()

ib.stop() 	# Stopping listener</div>
<br>
Turn off automatic acknowledgements to have more control over flow
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)
ib.autoAck(False)	# Disabling auto Acks
ib.start()	# Starting listener

while True:
	msg = ib.getMsg()
	
	# Manually acknowledging the message
	try:
		ack = ib.ack(msg,'AA')	# "AA" returned in MSA.1
	except:
		ack = ib.ack(msg,'AE','Optional Err Msg')  # "AE" returned in MSA.1 and Error message in MSA.3

ib.stop() 	# Stopping listener</div>
<br>

<!------------------ TCP outbound section ------------------>
<a name="tcp_out"></a>
<h3>TCP Sender</h3>
Adding an outbound TCP sender
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)
ib.start()	# Starting listener

# Sending to localhost port 10000
ob = hl7.tcp.client('localhost',10000)
ob.start()	# Starting sending connection

while True:
	msg = ib.getMsg()
	
	ack = ob.send(msg) # Sending on outbound line and returning ACK</div>
<br>	
Should you choose to not expect ACK's, they can be disabled.
Keep in mind that the connection will send<br>messages whether the remote listener is ready or not
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)
ib.start()	# Starting listener

# Sending to localhost port 10000
ob = hl7.tcp.client('localhost',10000)
ob.expectAck(False)	# Disabling Acknowledgements
ob.start()	# Starting sending connection

while True:
	msg = ib.getMsg()
	
	ob.send(msg) # Sending on outbound line and returning ACK</div>
<br>	
You can check the status of the outbound sender and restart if connection was lost
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Listening on local port 9999
ib = hl7.tcp.server(9999)
ib.start()	# Starting listener

# Sending to localhost port 10000
ob = hl7.tcp.client('localhost',10000)
ob.start()	# Starting sending connection

while True:
	msg = ib.getMsg()
	
	ack = False
	while not ack:
		# Checking connection status and return boolian value
		if not ob.status:
			ob.restart()	# If we are not connected we cycle the connection
		ack = ob.send(msg) 	# Sending on outbound line and returning ACK</div>

<!------------------ File inbound section ------------------>
<a name="file_in"></a>
<h3>File Reader</h3>
Reading messages into a List and looping over them
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Reading HL7 messages into Python List (supports wildcards)
ib_file = hl7.file('C:/test_messages/*.hl7')
messageList = ib_file.read() # Splits file at "MSH" segment by default

for msg in messageList:
	print(msg)</div>	
<br>
Reading messages with a different split character. Combining read into 1 line
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Reading HL7 messages into Python List
messageList = hl7.file('C:/test_messages/HL7Messages.hl7').read('MSH|^~\&')

for msg in messageList:
	print(msg)</div>
<br>
<!------------------ File outbound section ------------------>
<a name="file_out"></a>
<h3>File Writer</h3>
Writing messages outbound appending to a single file
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Reading HL7 messages into Python List
messageList = hl7.file('C:/test_messages/HL7Messages.hl7').read('MSH|^~\&')

for msg in messageList:
	# Outbound file destination
	outFile = open('C:/outfile.hl7','a')
	outFile.write(msg)
	outFile.close()</div>
<br>
Writing messages outbound, using dynamic filenames
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Reading HL7 messages into Python List
messageList = hl7.file('C:/test_messages/HL7Messages.hl7').read('MSH|^~\&')

fileCount = 1000
for msg in messageList:
	# Outbound file destination
	filename = fileCount
	outFile = open('C:/'+filename+'.hl7','w')
	outFile.write(msg)
	outFile.close()
	
	fileCount += 1</div>
<br>
<!------------------ File Misc section ------------------>
<a name="file_misc"></a>
<h3>Misc. File Functions</h3>
Reading file, then deleting
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Reading HL7 messages into Python List
file = hl7.file('C:/test_messages/HL7Messages.hl7')
messagesList = file.read()

if messagesList:
	file.delete()	# Deleting file after successful read</div>

<br>
Reading file, then renaming
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Reading HL7 messages into Python List
file = hl7.file('C:/test_messages/HL7Messages.hl7')
messagesList = file.read()

if messagesList:
	file.rename('C:/test_messages/HL7Messages.processed')	# Renaming file after successful read</div>

<br>
Creating HL7 Batch file
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Creating file object
file = hl7.file('C:/test_messages/HL7Messages.hl7')

# Batching file, if no filename, will batch using current filename and overwrite
file.batch('HL7Messages.batch','Optional Comments')</div>

<br>
Debatching back into HL7 file
<div id="editor" class="editor"># pyHL7 Example
import hl7

# Creating file object
file = hl7.file('C:/test_messages/HL7Messages.batch')

# Converting batch file back to HL7 file
file.debatch()</div>
	
<!------------------ Examples section ------------------>
<a name="examples"></a>
<h3>Examples</h3>	
Reading a file and sending outbound to TCP connection with an updated MSH.3 value
<div id="editor_large" class="editor"># pyHL7 Example
import hl7

# Creating outbound TCP Sender
ob = hl7.tcp.client('localhost',10000)
ob.start()

# Creating file object
messages = hl7.file('C:/test_messages/HL7Messages.hl7').read()

# Looping over messages
for msg in messages:
	msg = hl7.parse(msg)	# Parsing message
	
	# Updating MSH.3
	msg['MSH'][0]['MSH.3'][0]['MSH.3.1'] = 'pyHL7'
	
	msg = hl7.toString(msg)	# Converting back to string
	
	ack = ob.send(msg)		# Sending outbound</div>
<br>
Listening on a TCP port and if message is ADT, write to file
<div id="editor_large" class="editor"># pyHL7 Example
import hl7

# Creating inbound TCP listener
ib = hl7.tcp.server(9999)
ib.start()

# Listening for messages
while True:
	msg = ib.getMsg()		# Getting the message
	
	msg = hl7.parse(msg)	# Parsing message
	
	if msg['msg_type'] == 'ADT':
		out = open('out.hl7','a')
		out.write(hl7.toString(msg))
		out.close()</div>
<br>
TCP passthrough with heavy editing.  Using best practices
<div id="editor_large" class="editor"># pyHL7 Example
# pyHL7 Example
import hl7

# Creating inbound TCP listener
ib = hl7.tcp.server(9999)
ib.start()

# Creating outbound TCP Sender
ob = hl7.tcp.client('localhost',10000)
connection = False
while not connection:
	connection = ob.start()	# Waiting until we connect
	
# New HL7 messages structure
MSH = 'MSH||||||||||||\r'
EVN = 'EVN|||||\r'
PID = 'PID||||||||||||||||||\r'
PV1 = 'PV1' + '|' * 44 + '\r'
ZID = 'ZID|||\r'	# Custom segment
build = MSH+EVN+PID+PV1+ZID

# Listening for messages
while True:
	msg = ib.getMsg()		# Getting the message from the inbound
	
	msg = hl7.parse(msg)	# Parsing message

	# We only parse ADT messages
	if msg['msg_type'] == 'ADT':
		# Creating new message
		new = {}			# New message handle, initialized as dictionary
		new['build'] = build.split()
		
		# Building MSH segment
		new['MSH'] = msg['MSH']	# Copying MSH segment from old message
		new['MSH'][0]['MSH.3'][0]['MSH.3.1'] = 'pyHL7'
		
		# Building EVN segment
		new['EVN'] = msg['EVN']
		
		# Building PID segment
		new['PID'] = msg['PID']
		
		# Building PV1 segment
		if 'PV1' in msg:
			new['PV1'] = msg['PV1']
			
		# Adding new values to Z segment
		new['ZID'] = [{}]
		new['ZID'][0]['ZID.1'] = [{}]
		new['ZID'][0]['ZID.1'][0]['ZID.1.1'] = msg['PID'][0]['PID.3'][0]['PID.3.1']
		
		# Converting new message to string
		msg = hl7.toString(new)
		
		# Sending outbound error handling
		ack = False
		while not ack:
			if not ob.status:
				ob.restart()	# If not connected restart
			ack = ob.send(msg)	# Sending the message
	</div>
	
</body>

<script src="ACE/ace.js" type="text/javascript" charset="utf-8"></script>
<script>
/*/ Getting theme from browser
var theme = null
theme = localStorage.getItem('theme');
if (theme == "" || theme == null) {
	// Use the default
	var theme = 'xcode';
	localStorage.setItem('theme',theme);
} else {
}
var theme = 'xcode';
var options = document.getElementsByTagName('option');
for (var i = 0;i < options.length; i++) {
	if (options[i].value == theme) {
		options[i].setAttribute("selected","selected");
	}
}
*/

// Setting editor themes
reloadEditor();
</script>

</html>
